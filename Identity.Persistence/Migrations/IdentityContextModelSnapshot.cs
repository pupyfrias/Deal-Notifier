// <auto-generated />
using System;
using Identity.Persistence.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Identity.Persistence.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Identity.Persistence.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Export"
                        });
                });

            modelBuilder.Entity("Identity.Persistence.Entity.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Auth"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Users"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Roles"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Items"
                        });
                });

            modelBuilder.Entity("Identity.Persistence.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "43d33087-8feb-4904-9924-b1e53b51471a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c22bac9-4999-459f-a850-5cd4604df655",
                            Email = "basicuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKOa9RNWprkynBAKRajQzyIsY6LKPfajQuZ+WwrI4xl8FAJcKjsVNyU8wO9qvGwL7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4870721c-07a0-43cd-acc3-26fb4ba8e8c9",
                            TwoFactorEnabled = false,
                            UserName = "basicuser"
                        },
                        new
                        {
                            Id = "14fd37b5-3afb-4bf5-8239-69b5a8addd89",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddbb1e38-9ad4-4fd6-9b96-e62adfbb887b",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "James",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECYuNJPhJsYXxIS/LqthGuu8CgWAQexdqWX8hWvwXg3vfxz9UlITKqKN0sIGvWgzfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bab782c-4b14-4743-ab74-6a438bf6c89b",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Identity.Persistence.Entity.UserResourcePermission", b =>
                {
                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ResourceId", "PermissionId", "UserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserResourcePermissions");

                    b.HasData(
                        new
                        {
                            ResourceId = 1,
                            PermissionId = 1,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 2,
                            PermissionId = 1,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 3,
                            PermissionId = 1,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 4,
                            PermissionId = 1,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 1,
                            PermissionId = 2,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 2,
                            PermissionId = 2,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 3,
                            PermissionId = 2,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 4,
                            PermissionId = 2,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 1,
                            PermissionId = 3,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 2,
                            PermissionId = 3,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 3,
                            PermissionId = 3,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 4,
                            PermissionId = 3,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 1,
                            PermissionId = 4,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 2,
                            PermissionId = 4,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 3,
                            PermissionId = 4,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 4,
                            PermissionId = 4,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 1,
                            PermissionId = 5,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 2,
                            PermissionId = 5,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 3,
                            PermissionId = 5,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 4,
                            PermissionId = 5,
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89"
                        },
                        new
                        {
                            ResourceId = 1,
                            PermissionId = 2,
                            UserId = "43d33087-8feb-4904-9924-b1e53b51471a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5c0a34d8-8787-4caf-92c9-f4bd5ad6a4ef",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a7240acb-0a9c-4caa-86fc-83a5d5f604b1",
                            Name = "BasicUser",
                            NormalizedName = "BASICUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89",
                            RoleId = "5c0a34d8-8787-4caf-92c9-f4bd5ad6a4ef"
                        },
                        new
                        {
                            UserId = "14fd37b5-3afb-4bf5-8239-69b5a8addd89",
                            RoleId = "a7240acb-0a9c-4caa-86fc-83a5d5f604b1"
                        },
                        new
                        {
                            UserId = "43d33087-8feb-4904-9924-b1e53b51471a",
                            RoleId = "a7240acb-0a9c-4caa-86fc-83a5d5f604b1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Identity.Persistence.Entity.UserResourcePermission", b =>
                {
                    b.HasOne("Identity.Persistence.Entity.Permission", "Permission")
                        .WithMany("UserResourcePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Persistence.Entity.Resource", "Resource")
                        .WithMany("UserResourcePermissions")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Persistence.Entity.User", "User")
                        .WithMany("UserResourcePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Identity.Persistence.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Identity.Persistence.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Persistence.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Identity.Persistence.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Identity.Persistence.Entity.Permission", b =>
                {
                    b.Navigation("UserResourcePermissions");
                });

            modelBuilder.Entity("Identity.Persistence.Entity.Resource", b =>
                {
                    b.Navigation("UserResourcePermissions");
                });

            modelBuilder.Entity("Identity.Persistence.Entity.User", b =>
                {
                    b.Navigation("UserResourcePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
